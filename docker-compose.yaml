version: "3.9"
services:

  zookeeper:
    image: docker.io/confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: docker.io/confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"

  init-kafka:
    image: docker.io/confluentinc/cp-kafka:7.0.1
    depends_on:
      - broker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic ${TOPIC_NAME}
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic kafka-connect-config --config cleanup.policy=compact
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic kafka-connect-offsets --config cleanup.policy=compact
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic kafka-connect-status --config cleanup.policy=compact

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "
  
  connect:
    image: confluentinc/kafka-connect-datagen:latest
    container_name: kafka-connect
    depends_on:
      - init-kafka
    build:
      context: .
      dockerfile: Dockerfile-connector
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      # CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_GROUP_ID: "kafka-connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: "kafka-connect-config"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000  
      CONNECT_OFFSET_STORAGE_TOPIC: "kafka-connect-offsets"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: "kafka-connect-status"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://connect:8083"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
  
  mongo1:
    image: "local-mongod:1.0"
    container_name: mongo1
    ports:
      - "27017:27017"
    build:
      context: .
      dockerfile: Dockerfile-mongo
    command: --replSet rs0
    restart: always
  
  mongo1-setup:
    image: "local-mongod:1.0"
    container_name: mongo1-setup
    depends_on:
      - mongo1
    entrypoint:
      [
        "/bin/bash",
        "-c",
        "sleep 10 && mongo --host mongodb://mongo1:27017 /config-data.js",
      ]
    restart: "no"
  
  shell:
    image: "kafka-shell:1.0"
    container_name: shell
    build:
      context: .
      dockerfile: Dockerfile-shell
    depends_on:
      connect:
        condition: service_healthy
      mongo1-setup:
        condition: service_started
    command: "tail -f /dev/null"
  
  flask:
    image: "flask-web:1.0"
    build:
      context: .
      dockerfile: Dockerfile-flask
    container_name: flask
    depends_on:
      - broker
    ports:
      - "8008:8008"
    volumes:
      - ./:/app
    environment:
      KAFKA_BOOTSTRAP_SERVER_NAME: "broker"
      KAFKA_PORT: "29092"
      TOPIC_NAME: "${TOPIC_NAME}"
  
  user1:
    depends_on:
      - flask
    build:
      context: .
      dockerfile: Dockerfile-user
    container_name: user1

  user2:
    depends_on:
      - flask
    build:
      context: .
      dockerfile: Dockerfile-user
    container_name: user2
    
  user3:
    depends_on:
    - flask
    build:
      context: .
      dockerfile: Dockerfile-user
    container_name: user3

